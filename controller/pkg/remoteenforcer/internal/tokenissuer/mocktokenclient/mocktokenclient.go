// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/remoteenforcer/internal/tokenissuer/tokenissuer.go

package mocktokenclient

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	common "go.aporeto.io/trireme-lib/v11/common"
)

// MockTokenClient is a mock of TokenClient interface
// nolint
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockTokenClient
// nolint
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockTokenClient creates a new mock instance
// nolint
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return _m.recorder
}

// Run mocks base method
// nolint
func (_m *MockTokenClient) Run(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
// nolint
func (_mr *MockTokenClientMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockTokenClient)(nil).Run), arg0)
}

// Issue mocks base method
// nolint
func (_m *MockTokenClient) Issue(ctx context.Context, contextID string, stype common.ServiceTokenType, audience string, validity time.Duration) (string, error) {
	ret := _m.ctrl.Call(_m, "Issue", ctx, contextID, stype, audience, validity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue
// nolint
func (_mr *MockTokenClientMockRecorder) Issue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Issue", reflect.TypeOf((*MockTokenClient)(nil).Issue), arg0, arg1, arg2, arg3, arg4)
}
