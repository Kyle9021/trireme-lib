// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/remoteenforcer/internal/statsclient/interfaces.go

package mockstatsclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatsClient is a mock of StatsClient interface
// nolint
type MockStatsClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatsClientMockRecorder
}

// MockStatsClientMockRecorder is the mock recorder for MockStatsClient
// nolint
type MockStatsClientMockRecorder struct {
	mock *MockStatsClient
}

// NewMockStatsClient creates a new mock instance
// nolint
func NewMockStatsClient(ctrl *gomock.Controller) *MockStatsClient {
	mock := &MockStatsClient{ctrl: ctrl}
	mock.recorder = &MockStatsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockStatsClient) EXPECT() *MockStatsClientMockRecorder {
	return _m.recorder
}

// Run mocks base method
// nolint
func (_m *MockStatsClient) Run(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
// nolint
func (_mr *MockStatsClientMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockStatsClient)(nil).Run), arg0)
}

// SendStats mocks base method
// nolint
func (_m *MockStatsClient) SendStats() {
	_m.ctrl.Call(_m, "SendStats")
}

// SendStats indicates an expected call of SendStats
// nolint
func (_mr *MockStatsClientMockRecorder) SendStats() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendStats", reflect.TypeOf((*MockStatsClient)(nil).SendStats))
}
