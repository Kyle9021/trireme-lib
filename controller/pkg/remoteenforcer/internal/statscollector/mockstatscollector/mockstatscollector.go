// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pkg/remoteenforcer/internal/statscollector/interfaces.go

package mockstatscollector

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	collector "go.aporeto.io/trireme-lib/v11/collector"
)

// MockCollectorReader is a mock of CollectorReader interface
// nolint
type MockCollectorReader struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorReaderMockRecorder
}

// MockCollectorReaderMockRecorder is the mock recorder for MockCollectorReader
// nolint
type MockCollectorReaderMockRecorder struct {
	mock *MockCollectorReader
}

// NewMockCollectorReader creates a new mock instance
// nolint
func NewMockCollectorReader(ctrl *gomock.Controller) *MockCollectorReader {
	mock := &MockCollectorReader{ctrl: ctrl}
	mock.recorder = &MockCollectorReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockCollectorReader) EXPECT() *MockCollectorReaderMockRecorder {
	return _m.recorder
}

// Count mocks base method
// nolint
func (_m *MockCollectorReader) Count() int {
	ret := _m.ctrl.Call(_m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
// nolint
func (_mr *MockCollectorReaderMockRecorder) Count() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Count", reflect.TypeOf((*MockCollectorReader)(nil).Count))
}

// GetAllRecords mocks base method
// nolint
func (_m *MockCollectorReader) GetAllRecords() map[string]*collector.FlowRecord {
	ret := _m.ctrl.Call(_m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// GetAllRecords indicates an expected call of GetAllRecords
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetAllRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllRecords", reflect.TypeOf((*MockCollectorReader)(nil).GetAllRecords))
}

// GetUserRecords mocks base method
// nolint
func (_m *MockCollectorReader) GetUserRecords() map[string]*collector.UserRecord {
	ret := _m.ctrl.Call(_m, "GetUserRecords")
	ret0, _ := ret[0].(map[string]*collector.UserRecord)
	return ret0
}

// GetUserRecords indicates an expected call of GetUserRecords
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetUserRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserRecords", reflect.TypeOf((*MockCollectorReader)(nil).GetUserRecords))
}

// FlushUserCache mocks base method
// nolint
func (_m *MockCollectorReader) FlushUserCache() {
	_m.ctrl.Call(_m, "FlushUserCache")
}

// FlushUserCache indicates an expected call of FlushUserCache
// nolint
func (_mr *MockCollectorReaderMockRecorder) FlushUserCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlushUserCache", reflect.TypeOf((*MockCollectorReader)(nil).FlushUserCache))
}

// GetAllDataPathPacketRecords mocks base method
// nolint
func (_m *MockCollectorReader) GetAllDataPathPacketRecords() []*collector.PacketReport {
	ret := _m.ctrl.Call(_m, "GetAllDataPathPacketRecords")
	ret0, _ := ret[0].([]*collector.PacketReport)
	return ret0
}

// GetAllDataPathPacketRecords indicates an expected call of GetAllDataPathPacketRecords
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetAllDataPathPacketRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllDataPathPacketRecords", reflect.TypeOf((*MockCollectorReader)(nil).GetAllDataPathPacketRecords))
}

// GetAllCounterReports mocks base method
// nolint
func (_m *MockCollectorReader) GetAllCounterReports() []*collector.CounterReport {
	ret := _m.ctrl.Call(_m, "GetAllCounterReports")
	ret0, _ := ret[0].([]*collector.CounterReport)
	return ret0
}

// GetAllCounterReports indicates an expected call of GetAllCounterReports
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetAllCounterReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllCounterReports", reflect.TypeOf((*MockCollectorReader)(nil).GetAllCounterReports))
}

// GetDNSReports mocks base method
// nolint
func (_m *MockCollectorReader) GetDNSReports() chan *collector.DNSRequestReport {
	ret := _m.ctrl.Call(_m, "GetDNSReports")
	ret0, _ := ret[0].(chan *collector.DNSRequestReport)
	return ret0
}

// GetDNSReports indicates an expected call of GetDNSReports
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetDNSReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDNSReports", reflect.TypeOf((*MockCollectorReader)(nil).GetDNSReports))
}

// GetPingReports mocks base method
// nolint
func (_m *MockCollectorReader) GetPingReports() chan *collector.PingReport {
	ret := _m.ctrl.Call(_m, "GetPingReports")
	ret0, _ := ret[0].(chan *collector.PingReport)
	return ret0
}

// GetPingReports indicates an expected call of GetPingReports
// nolint
func (_mr *MockCollectorReaderMockRecorder) GetPingReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPingReports", reflect.TypeOf((*MockCollectorReader)(nil).GetPingReports))
}

// MockCollector is a mock of Collector interface
// nolint
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
}

// MockCollectorMockRecorder is the mock recorder for MockCollector
// nolint
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance
// nolint
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return _m.recorder
}

// Count mocks base method
// nolint
func (_m *MockCollector) Count() int {
	ret := _m.ctrl.Call(_m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
// nolint
func (_mr *MockCollectorMockRecorder) Count() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Count", reflect.TypeOf((*MockCollector)(nil).Count))
}

// GetAllRecords mocks base method
// nolint
func (_m *MockCollector) GetAllRecords() map[string]*collector.FlowRecord {
	ret := _m.ctrl.Call(_m, "GetAllRecords")
	ret0, _ := ret[0].(map[string]*collector.FlowRecord)
	return ret0
}

// GetAllRecords indicates an expected call of GetAllRecords
// nolint
func (_mr *MockCollectorMockRecorder) GetAllRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllRecords", reflect.TypeOf((*MockCollector)(nil).GetAllRecords))
}

// GetUserRecords mocks base method
// nolint
func (_m *MockCollector) GetUserRecords() map[string]*collector.UserRecord {
	ret := _m.ctrl.Call(_m, "GetUserRecords")
	ret0, _ := ret[0].(map[string]*collector.UserRecord)
	return ret0
}

// GetUserRecords indicates an expected call of GetUserRecords
// nolint
func (_mr *MockCollectorMockRecorder) GetUserRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserRecords", reflect.TypeOf((*MockCollector)(nil).GetUserRecords))
}

// FlushUserCache mocks base method
// nolint
func (_m *MockCollector) FlushUserCache() {
	_m.ctrl.Call(_m, "FlushUserCache")
}

// FlushUserCache indicates an expected call of FlushUserCache
// nolint
func (_mr *MockCollectorMockRecorder) FlushUserCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlushUserCache", reflect.TypeOf((*MockCollector)(nil).FlushUserCache))
}

// GetAllDataPathPacketRecords mocks base method
// nolint
func (_m *MockCollector) GetAllDataPathPacketRecords() []*collector.PacketReport {
	ret := _m.ctrl.Call(_m, "GetAllDataPathPacketRecords")
	ret0, _ := ret[0].([]*collector.PacketReport)
	return ret0
}

// GetAllDataPathPacketRecords indicates an expected call of GetAllDataPathPacketRecords
// nolint
func (_mr *MockCollectorMockRecorder) GetAllDataPathPacketRecords() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllDataPathPacketRecords", reflect.TypeOf((*MockCollector)(nil).GetAllDataPathPacketRecords))
}

// GetAllCounterReports mocks base method
// nolint
func (_m *MockCollector) GetAllCounterReports() []*collector.CounterReport {
	ret := _m.ctrl.Call(_m, "GetAllCounterReports")
	ret0, _ := ret[0].([]*collector.CounterReport)
	return ret0
}

// GetAllCounterReports indicates an expected call of GetAllCounterReports
// nolint
func (_mr *MockCollectorMockRecorder) GetAllCounterReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllCounterReports", reflect.TypeOf((*MockCollector)(nil).GetAllCounterReports))
}

// GetDNSReports mocks base method
// nolint
func (_m *MockCollector) GetDNSReports() chan *collector.DNSRequestReport {
	ret := _m.ctrl.Call(_m, "GetDNSReports")
	ret0, _ := ret[0].(chan *collector.DNSRequestReport)
	return ret0
}

// GetDNSReports indicates an expected call of GetDNSReports
// nolint
func (_mr *MockCollectorMockRecorder) GetDNSReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDNSReports", reflect.TypeOf((*MockCollector)(nil).GetDNSReports))
}

// GetPingReports mocks base method
// nolint
func (_m *MockCollector) GetPingReports() chan *collector.PingReport {
	ret := _m.ctrl.Call(_m, "GetPingReports")
	ret0, _ := ret[0].(chan *collector.PingReport)
	return ret0
}

// GetPingReports indicates an expected call of GetPingReports
// nolint
func (_mr *MockCollectorMockRecorder) GetPingReports() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPingReports", reflect.TypeOf((*MockCollector)(nil).GetPingReports))
}

// CollectFlowEvent mocks base method
// nolint
func (_m *MockCollector) CollectFlowEvent(record *collector.FlowRecord) {
	_m.ctrl.Call(_m, "CollectFlowEvent", record)
}

// CollectFlowEvent indicates an expected call of CollectFlowEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectFlowEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectFlowEvent", reflect.TypeOf((*MockCollector)(nil).CollectFlowEvent), arg0)
}

// CollectContainerEvent mocks base method
// nolint
func (_m *MockCollector) CollectContainerEvent(record *collector.ContainerRecord) {
	_m.ctrl.Call(_m, "CollectContainerEvent", record)
}

// CollectContainerEvent indicates an expected call of CollectContainerEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectContainerEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectContainerEvent", reflect.TypeOf((*MockCollector)(nil).CollectContainerEvent), arg0)
}

// CollectUserEvent mocks base method
// nolint
func (_m *MockCollector) CollectUserEvent(record *collector.UserRecord) {
	_m.ctrl.Call(_m, "CollectUserEvent", record)
}

// CollectUserEvent indicates an expected call of CollectUserEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectUserEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectUserEvent", reflect.TypeOf((*MockCollector)(nil).CollectUserEvent), arg0)
}

// CollectTraceEvent mocks base method
// nolint
func (_m *MockCollector) CollectTraceEvent(records []string) {
	_m.ctrl.Call(_m, "CollectTraceEvent", records)
}

// CollectTraceEvent indicates an expected call of CollectTraceEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectTraceEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectTraceEvent", reflect.TypeOf((*MockCollector)(nil).CollectTraceEvent), arg0)
}

// CollectPacketEvent mocks base method
// nolint
func (_m *MockCollector) CollectPacketEvent(report *collector.PacketReport) {
	_m.ctrl.Call(_m, "CollectPacketEvent", report)
}

// CollectPacketEvent indicates an expected call of CollectPacketEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectPacketEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectPacketEvent", reflect.TypeOf((*MockCollector)(nil).CollectPacketEvent), arg0)
}

// CollectCounterEvent mocks base method
// nolint
func (_m *MockCollector) CollectCounterEvent(counterReport *collector.CounterReport) {
	_m.ctrl.Call(_m, "CollectCounterEvent", counterReport)
}

// CollectCounterEvent indicates an expected call of CollectCounterEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectCounterEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectCounterEvent", reflect.TypeOf((*MockCollector)(nil).CollectCounterEvent), arg0)
}

// CollectDNSRequests mocks base method
// nolint
func (_m *MockCollector) CollectDNSRequests(request *collector.DNSRequestReport) {
	_m.ctrl.Call(_m, "CollectDNSRequests", request)
}

// CollectDNSRequests indicates an expected call of CollectDNSRequests
// nolint
func (_mr *MockCollectorMockRecorder) CollectDNSRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectDNSRequests", reflect.TypeOf((*MockCollector)(nil).CollectDNSRequests), arg0)
}

// CollectPingEvent mocks base method
// nolint
func (_m *MockCollector) CollectPingEvent(report *collector.PingReport) {
	_m.ctrl.Call(_m, "CollectPingEvent", report)
}

// CollectPingEvent indicates an expected call of CollectPingEvent
// nolint
func (_mr *MockCollectorMockRecorder) CollectPingEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectPingEvent", reflect.TypeOf((*MockCollector)(nil).CollectPingEvent), arg0)
}
