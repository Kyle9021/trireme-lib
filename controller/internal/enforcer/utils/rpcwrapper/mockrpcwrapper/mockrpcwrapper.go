// Code generated by MockGen. DO NOT EDIT.
// Source: controller/internal/enforcer/utils/rpcwrapper/interfaces.go

package mockrpcwrapper

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPCClient is a mock of RPCClient interface
// nolint
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient
// nolint
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance
// nolint
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return _m.recorder
}

// NewRPCClient mocks base method
// nolint
func (_m *MockRPCClient) NewRPCClient(contextID string, channel string, rpcSecret string) error {
	ret := _m.ctrl.Call(_m, "NewRPCClient", contextID, channel, rpcSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewRPCClient indicates an expected call of NewRPCClient
// nolint
func (_mr *MockRPCClientMockRecorder) NewRPCClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewRPCClient", reflect.TypeOf((*MockRPCClient)(nil).NewRPCClient), arg0, arg1, arg2)
}

// GetRPCClient mocks base method
// nolint
func (_m *MockRPCClient) GetRPCClient(contextID string) (*RPCHdl, error) {
	ret := _m.ctrl.Call(_m, "GetRPCClient", contextID)
	ret0, _ := ret[0].(*RPCHdl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRPCClient indicates an expected call of GetRPCClient
// nolint
func (_mr *MockRPCClientMockRecorder) GetRPCClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetRPCClient", reflect.TypeOf((*MockRPCClient)(nil).GetRPCClient), arg0)
}

// RemoteCall mocks base method
// nolint
func (_m *MockRPCClient) RemoteCall(contextID string, methodName string, req *Request, resp *Response) error {
	ret := _m.ctrl.Call(_m, "RemoteCall", contextID, methodName, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoteCall indicates an expected call of RemoteCall
// nolint
func (_mr *MockRPCClientMockRecorder) RemoteCall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoteCall", reflect.TypeOf((*MockRPCClient)(nil).RemoteCall), arg0, arg1, arg2, arg3)
}

// DestroyRPCClient mocks base method
// nolint
func (_m *MockRPCClient) DestroyRPCClient(contextID string) {
	_m.ctrl.Call(_m, "DestroyRPCClient", contextID)
}

// DestroyRPCClient indicates an expected call of DestroyRPCClient
// nolint
func (_mr *MockRPCClientMockRecorder) DestroyRPCClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DestroyRPCClient", reflect.TypeOf((*MockRPCClient)(nil).DestroyRPCClient), arg0)
}

// ContextList mocks base method
// nolint
func (_m *MockRPCClient) ContextList() []string {
	ret := _m.ctrl.Call(_m, "ContextList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ContextList indicates an expected call of ContextList
// nolint
func (_mr *MockRPCClientMockRecorder) ContextList() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ContextList", reflect.TypeOf((*MockRPCClient)(nil).ContextList))
}

// CheckValidity mocks base method
// nolint
func (_m *MockRPCClient) CheckValidity(req *Request, secret string) bool {
	ret := _m.ctrl.Call(_m, "CheckValidity", req, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckValidity indicates an expected call of CheckValidity
// nolint
func (_mr *MockRPCClientMockRecorder) CheckValidity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckValidity", reflect.TypeOf((*MockRPCClient)(nil).CheckValidity), arg0, arg1)
}

// MockRPCServer is a mock of RPCServer interface
// nolint
type MockRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerMockRecorder
}

// MockRPCServerMockRecorder is the mock recorder for MockRPCServer
// nolint
type MockRPCServerMockRecorder struct {
	mock *MockRPCServer
}

// NewMockRPCServer creates a new mock instance
// nolint
func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {
	mock := &MockRPCServer{ctrl: ctrl}
	mock.recorder = &MockRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockRPCServer) EXPECT() *MockRPCServerMockRecorder {
	return _m.recorder
}

// StartServer mocks base method
// nolint
func (_m *MockRPCServer) StartServer(ctx context.Context, protocol string, path string, handler interface{}) error {
	ret := _m.ctrl.Call(_m, "StartServer", ctx, protocol, path, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer
// nolint
func (_mr *MockRPCServerMockRecorder) StartServer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartServer", reflect.TypeOf((*MockRPCServer)(nil).StartServer), arg0, arg1, arg2, arg3)
}

// ProcessMessage mocks base method
// nolint
func (_m *MockRPCServer) ProcessMessage(req *Request, secret string) bool {
	ret := _m.ctrl.Call(_m, "ProcessMessage", req, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage
// nolint
func (_mr *MockRPCServerMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessMessage", reflect.TypeOf((*MockRPCServer)(nil).ProcessMessage), arg0, arg1)
}

// CheckValidity mocks base method
// nolint
func (_m *MockRPCServer) CheckValidity(req *Request, secret string) bool {
	ret := _m.ctrl.Call(_m, "CheckValidity", req, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckValidity indicates an expected call of CheckValidity
// nolint
func (_mr *MockRPCServerMockRecorder) CheckValidity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CheckValidity", reflect.TypeOf((*MockRPCServer)(nil).CheckValidity), arg0, arg1)
}
