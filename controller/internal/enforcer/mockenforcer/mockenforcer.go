// Code generated by MockGen. DO NOT EDIT.
// Source: controller/internal/enforcer/enforcer.go

package mockenforcer

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	constants "go.aporeto.io/trireme-lib/v11/controller/constants"
	ebpf "go.aporeto.io/trireme-lib/v11/controller/pkg/ebpf"
	fqconfig "go.aporeto.io/trireme-lib/v11/controller/pkg/fqconfig"
	packettracing "go.aporeto.io/trireme-lib/v11/controller/pkg/packettracing"
	secrets "go.aporeto.io/trireme-lib/v11/controller/pkg/secrets"
	runtime "go.aporeto.io/trireme-lib/v11/controller/runtime"
	policy "go.aporeto.io/trireme-lib/v11/policy"
)

// MockEnforcer is a mock of Enforcer interface
// nolint
type MockEnforcer struct {
	ctrl     *gomock.Controller
	recorder *MockEnforcerMockRecorder
}

// MockEnforcerMockRecorder is the mock recorder for MockEnforcer
// nolint
type MockEnforcerMockRecorder struct {
	mock *MockEnforcer
}

// NewMockEnforcer creates a new mock instance
// nolint
func NewMockEnforcer(ctrl *gomock.Controller) *MockEnforcer {
	mock := &MockEnforcer{ctrl: ctrl}
	mock.recorder = &MockEnforcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockEnforcer) EXPECT() *MockEnforcerMockRecorder {
	return _m.recorder
}

// Enforce mocks base method
// nolint
func (_m *MockEnforcer) Enforce(contextID string, puInfo *policy.PUInfo) error {
	ret := _m.ctrl.Call(_m, "Enforce", contextID, puInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enforce indicates an expected call of Enforce
// nolint
func (_mr *MockEnforcerMockRecorder) Enforce(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enforce", reflect.TypeOf((*MockEnforcer)(nil).Enforce), arg0, arg1)
}

// Unenforce mocks base method
// nolint
func (_m *MockEnforcer) Unenforce(contextID string) error {
	ret := _m.ctrl.Call(_m, "Unenforce", contextID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unenforce indicates an expected call of Unenforce
// nolint
func (_mr *MockEnforcerMockRecorder) Unenforce(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unenforce", reflect.TypeOf((*MockEnforcer)(nil).Unenforce), arg0)
}

// GetFilterQueue mocks base method
// nolint
func (_m *MockEnforcer) GetFilterQueue() *fqconfig.FilterQueue {
	ret := _m.ctrl.Call(_m, "GetFilterQueue")
	ret0, _ := ret[0].(*fqconfig.FilterQueue)
	return ret0
}

// GetFilterQueue indicates an expected call of GetFilterQueue
// nolint
func (_mr *MockEnforcerMockRecorder) GetFilterQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFilterQueue", reflect.TypeOf((*MockEnforcer)(nil).GetFilterQueue))
}

// GetBPFObject mocks base method
// nolint
func (_m *MockEnforcer) GetBPFObject() ebpf.BPFModule {
	ret := _m.ctrl.Call(_m, "GetBPFObject")
	ret0, _ := ret[0].(ebpf.BPFModule)
	return ret0
}

// GetBPFObject indicates an expected call of GetBPFObject
// nolint
func (_mr *MockEnforcerMockRecorder) GetBPFObject() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetBPFObject", reflect.TypeOf((*MockEnforcer)(nil).GetBPFObject))
}

// Run mocks base method
// nolint
func (_m *MockEnforcer) Run(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
// nolint
func (_mr *MockEnforcerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockEnforcer)(nil).Run), arg0)
}

// UpdateSecrets mocks base method
// nolint
func (_m *MockEnforcer) UpdateSecrets(secrets secrets.Secrets) error {
	ret := _m.ctrl.Call(_m, "UpdateSecrets", secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecrets indicates an expected call of UpdateSecrets
// nolint
func (_mr *MockEnforcerMockRecorder) UpdateSecrets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateSecrets", reflect.TypeOf((*MockEnforcer)(nil).UpdateSecrets), arg0)
}

// SetTargetNetworks mocks base method
// nolint
func (_m *MockEnforcer) SetTargetNetworks(cfg *runtime.Configuration) error {
	ret := _m.ctrl.Call(_m, "SetTargetNetworks", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTargetNetworks indicates an expected call of SetTargetNetworks
// nolint
func (_mr *MockEnforcerMockRecorder) SetTargetNetworks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetTargetNetworks", reflect.TypeOf((*MockEnforcer)(nil).SetTargetNetworks), arg0)
}

// SetLogLevel mocks base method
// nolint
func (_m *MockEnforcer) SetLogLevel(level constants.LogLevel) error {
	ret := _m.ctrl.Call(_m, "SetLogLevel", level)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogLevel indicates an expected call of SetLogLevel
// nolint
func (_mr *MockEnforcerMockRecorder) SetLogLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetLogLevel", reflect.TypeOf((*MockEnforcer)(nil).SetLogLevel), arg0)
}

// CleanUp mocks base method
// nolint
func (_m *MockEnforcer) CleanUp() error {
	ret := _m.ctrl.Call(_m, "CleanUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUp indicates an expected call of CleanUp
// nolint
func (_mr *MockEnforcerMockRecorder) CleanUp() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CleanUp", reflect.TypeOf((*MockEnforcer)(nil).CleanUp))
}

// EnableDatapathPacketTracing mocks base method
// nolint
func (_m *MockEnforcer) EnableDatapathPacketTracing(ctx context.Context, contextID string, direction packettracing.TracingDirection, interval time.Duration) error {
	ret := _m.ctrl.Call(_m, "EnableDatapathPacketTracing", ctx, contextID, direction, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableDatapathPacketTracing indicates an expected call of EnableDatapathPacketTracing
// nolint
func (_mr *MockEnforcerMockRecorder) EnableDatapathPacketTracing(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnableDatapathPacketTracing", reflect.TypeOf((*MockEnforcer)(nil).EnableDatapathPacketTracing), arg0, arg1, arg2, arg3)
}

// EnableIPTablesPacketTracing mocks base method
// nolint
func (_m *MockEnforcer) EnableIPTablesPacketTracing(ctx context.Context, contextID string, interval time.Duration) error {
	ret := _m.ctrl.Call(_m, "EnableIPTablesPacketTracing", ctx, contextID, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableIPTablesPacketTracing indicates an expected call of EnableIPTablesPacketTracing
// nolint
func (_mr *MockEnforcerMockRecorder) EnableIPTablesPacketTracing(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnableIPTablesPacketTracing", reflect.TypeOf((*MockEnforcer)(nil).EnableIPTablesPacketTracing), arg0, arg1, arg2)
}

// Ping mocks base method
// nolint
func (_m *MockEnforcer) Ping(ctx context.Context, contextID string, pingConfig *policy.PingConfig) error {
	ret := _m.ctrl.Call(_m, "Ping", ctx, contextID, pingConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
// nolint
func (_mr *MockEnforcerMockRecorder) Ping(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Ping", reflect.TypeOf((*MockEnforcer)(nil).Ping), arg0, arg1, arg2)
}

// MockDebugInfo is a mock of DebugInfo interface
// nolint
type MockDebugInfo struct {
	ctrl     *gomock.Controller
	recorder *MockDebugInfoMockRecorder
}

// MockDebugInfoMockRecorder is the mock recorder for MockDebugInfo
// nolint
type MockDebugInfoMockRecorder struct {
	mock *MockDebugInfo
}

// NewMockDebugInfo creates a new mock instance
// nolint
func NewMockDebugInfo(ctrl *gomock.Controller) *MockDebugInfo {
	mock := &MockDebugInfo{ctrl: ctrl}
	mock.recorder = &MockDebugInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockDebugInfo) EXPECT() *MockDebugInfoMockRecorder {
	return _m.recorder
}

// EnableDatapathPacketTracing mocks base method
// nolint
func (_m *MockDebugInfo) EnableDatapathPacketTracing(ctx context.Context, contextID string, direction packettracing.TracingDirection, interval time.Duration) error {
	ret := _m.ctrl.Call(_m, "EnableDatapathPacketTracing", ctx, contextID, direction, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableDatapathPacketTracing indicates an expected call of EnableDatapathPacketTracing
// nolint
func (_mr *MockDebugInfoMockRecorder) EnableDatapathPacketTracing(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnableDatapathPacketTracing", reflect.TypeOf((*MockDebugInfo)(nil).EnableDatapathPacketTracing), arg0, arg1, arg2, arg3)
}

// EnableIPTablesPacketTracing mocks base method
// nolint
func (_m *MockDebugInfo) EnableIPTablesPacketTracing(ctx context.Context, contextID string, interval time.Duration) error {
	ret := _m.ctrl.Call(_m, "EnableIPTablesPacketTracing", ctx, contextID, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableIPTablesPacketTracing indicates an expected call of EnableIPTablesPacketTracing
// nolint
func (_mr *MockDebugInfoMockRecorder) EnableIPTablesPacketTracing(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EnableIPTablesPacketTracing", reflect.TypeOf((*MockDebugInfo)(nil).EnableIPTablesPacketTracing), arg0, arg1, arg2)
}

// Ping mocks base method
// nolint
func (_m *MockDebugInfo) Ping(ctx context.Context, contextID string, pingConfig *policy.PingConfig) error {
	ret := _m.ctrl.Call(_m, "Ping", ctx, contextID, pingConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
// nolint
func (_mr *MockDebugInfoMockRecorder) Ping(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Ping", reflect.TypeOf((*MockDebugInfo)(nil).Ping), arg0, arg1, arg2)
}
