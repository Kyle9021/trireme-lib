// Code generated by MockGen. DO NOT EDIT.
// Source: collector/interfaces.go

package mockcollector

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventCollector is a mock of EventCollector interface
// nolint
type MockEventCollector struct {
	ctrl     *gomock.Controller
	recorder *MockEventCollectorMockRecorder
}

// MockEventCollectorMockRecorder is the mock recorder for MockEventCollector
// nolint
type MockEventCollectorMockRecorder struct {
	mock *MockEventCollector
}

// NewMockEventCollector creates a new mock instance
// nolint
func NewMockEventCollector(ctrl *gomock.Controller) *MockEventCollector {
	mock := &MockEventCollector{ctrl: ctrl}
	mock.recorder = &MockEventCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockEventCollector) EXPECT() *MockEventCollectorMockRecorder {
	return _m.recorder
}

// CollectFlowEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectFlowEvent(record *FlowRecord) {
	_m.ctrl.Call(_m, "CollectFlowEvent", record)
}

// CollectFlowEvent indicates an expected call of CollectFlowEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectFlowEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectFlowEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectFlowEvent), arg0)
}

// CollectContainerEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectContainerEvent(record *ContainerRecord) {
	_m.ctrl.Call(_m, "CollectContainerEvent", record)
}

// CollectContainerEvent indicates an expected call of CollectContainerEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectContainerEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectContainerEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectContainerEvent), arg0)
}

// CollectUserEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectUserEvent(record *UserRecord) {
	_m.ctrl.Call(_m, "CollectUserEvent", record)
}

// CollectUserEvent indicates an expected call of CollectUserEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectUserEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectUserEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectUserEvent), arg0)
}

// CollectTraceEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectTraceEvent(records []string) {
	_m.ctrl.Call(_m, "CollectTraceEvent", records)
}

// CollectTraceEvent indicates an expected call of CollectTraceEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectTraceEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectTraceEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectTraceEvent), arg0)
}

// CollectPacketEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectPacketEvent(report *PacketReport) {
	_m.ctrl.Call(_m, "CollectPacketEvent", report)
}

// CollectPacketEvent indicates an expected call of CollectPacketEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectPacketEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectPacketEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectPacketEvent), arg0)
}

// CollectCounterEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectCounterEvent(counterReport *CounterReport) {
	_m.ctrl.Call(_m, "CollectCounterEvent", counterReport)
}

// CollectCounterEvent indicates an expected call of CollectCounterEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectCounterEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectCounterEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectCounterEvent), arg0)
}

// CollectDNSRequests mocks base method
// nolint
func (_m *MockEventCollector) CollectDNSRequests(request *DNSRequestReport) {
	_m.ctrl.Call(_m, "CollectDNSRequests", request)
}

// CollectDNSRequests indicates an expected call of CollectDNSRequests
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectDNSRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectDNSRequests", reflect.TypeOf((*MockEventCollector)(nil).CollectDNSRequests), arg0)
}

// CollectPingEvent mocks base method
// nolint
func (_m *MockEventCollector) CollectPingEvent(report *PingReport) {
	_m.ctrl.Call(_m, "CollectPingEvent", report)
}

// CollectPingEvent indicates an expected call of CollectPingEvent
// nolint
func (_mr *MockEventCollectorMockRecorder) CollectPingEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CollectPingEvent", reflect.TypeOf((*MockEventCollector)(nil).CollectPingEvent), arg0)
}
