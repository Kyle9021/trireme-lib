// Code generated by MockGen. DO NOT EDIT.
// Source: utils/cgnetcls/interfaces.go

package mockcgnetcls

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCgroupnetcls is a mock of Cgroupnetcls interface
// nolint
type MockCgroupnetcls struct {
	ctrl     *gomock.Controller
	recorder *MockCgroupnetclsMockRecorder
}

// MockCgroupnetclsMockRecorder is the mock recorder for MockCgroupnetcls
// nolint
type MockCgroupnetclsMockRecorder struct {
	mock *MockCgroupnetcls
}

// NewMockCgroupnetcls creates a new mock instance
// nolint
func NewMockCgroupnetcls(ctrl *gomock.Controller) *MockCgroupnetcls {
	mock := &MockCgroupnetcls{ctrl: ctrl}
	mock.recorder = &MockCgroupnetclsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
// nolint
func (_m *MockCgroupnetcls) EXPECT() *MockCgroupnetclsMockRecorder {
	return _m.recorder
}

// Creategroup mocks base method
// nolint
func (_m *MockCgroupnetcls) Creategroup(cgroupname string) error {
	ret := _m.ctrl.Call(_m, "Creategroup", cgroupname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Creategroup indicates an expected call of Creategroup
// nolint
func (_mr *MockCgroupnetclsMockRecorder) Creategroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Creategroup", reflect.TypeOf((*MockCgroupnetcls)(nil).Creategroup), arg0)
}

// AssignMark mocks base method
// nolint
func (_m *MockCgroupnetcls) AssignMark(cgroupname string, mark uint64) error {
	ret := _m.ctrl.Call(_m, "AssignMark", cgroupname, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignMark indicates an expected call of AssignMark
// nolint
func (_mr *MockCgroupnetclsMockRecorder) AssignMark(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssignMark", reflect.TypeOf((*MockCgroupnetcls)(nil).AssignMark), arg0, arg1)
}

// AssignRootMark mocks base method
// nolint
func (_m *MockCgroupnetcls) AssignRootMark(mark uint64) error {
	ret := _m.ctrl.Call(_m, "AssignRootMark", mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRootMark indicates an expected call of AssignRootMark
// nolint
func (_mr *MockCgroupnetclsMockRecorder) AssignRootMark(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssignRootMark", reflect.TypeOf((*MockCgroupnetcls)(nil).AssignRootMark), arg0)
}

// AddProcess mocks base method
// nolint
func (_m *MockCgroupnetcls) AddProcess(cgroupname string, pid int) error {
	ret := _m.ctrl.Call(_m, "AddProcess", cgroupname, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcess indicates an expected call of AddProcess
// nolint
func (_mr *MockCgroupnetclsMockRecorder) AddProcess(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddProcess", reflect.TypeOf((*MockCgroupnetcls)(nil).AddProcess), arg0, arg1)
}

// RemoveProcess mocks base method
// nolint
func (_m *MockCgroupnetcls) RemoveProcess(cgroupname string, pid int) error {
	ret := _m.ctrl.Call(_m, "RemoveProcess", cgroupname, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcess indicates an expected call of RemoveProcess
// nolint
func (_mr *MockCgroupnetclsMockRecorder) RemoveProcess(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveProcess", reflect.TypeOf((*MockCgroupnetcls)(nil).RemoveProcess), arg0, arg1)
}

// DeleteCgroup mocks base method
// nolint
func (_m *MockCgroupnetcls) DeleteCgroup(cgroupname string) error {
	ret := _m.ctrl.Call(_m, "DeleteCgroup", cgroupname)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCgroup indicates an expected call of DeleteCgroup
// nolint
func (_mr *MockCgroupnetclsMockRecorder) DeleteCgroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteCgroup", reflect.TypeOf((*MockCgroupnetcls)(nil).DeleteCgroup), arg0)
}

// Deletebasepath mocks base method
// nolint
func (_m *MockCgroupnetcls) Deletebasepath(contextID string) bool {
	ret := _m.ctrl.Call(_m, "Deletebasepath", contextID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deletebasepath indicates an expected call of Deletebasepath
// nolint
func (_mr *MockCgroupnetclsMockRecorder) Deletebasepath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Deletebasepath", reflect.TypeOf((*MockCgroupnetcls)(nil).Deletebasepath), arg0)
}

// ListCgroupProcesses mocks base method
// nolint
func (_m *MockCgroupnetcls) ListCgroupProcesses(cgroupname string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListCgroupProcesses", cgroupname)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCgroupProcesses indicates an expected call of ListCgroupProcesses
// nolint
func (_mr *MockCgroupnetclsMockRecorder) ListCgroupProcesses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListCgroupProcesses", reflect.TypeOf((*MockCgroupnetcls)(nil).ListCgroupProcesses), arg0)
}

// ListAllCgroups mocks base method
// nolint
func (_m *MockCgroupnetcls) ListAllCgroups(path string) []string {
	ret := _m.ctrl.Call(_m, "ListAllCgroups", path)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListAllCgroups indicates an expected call of ListAllCgroups
// nolint
func (_mr *MockCgroupnetclsMockRecorder) ListAllCgroups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListAllCgroups", reflect.TypeOf((*MockCgroupnetcls)(nil).ListAllCgroups), arg0)
}
